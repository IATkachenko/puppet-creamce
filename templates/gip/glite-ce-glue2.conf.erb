# Site Id
SiteId = <%=@sitename%>

#
#
# Computing Service Id
# Provided by yaim variable COMPUTING_SERVICE_ID (required if we are in cluster mode)
# Otherwise Computing Service Id is hostname + the "_ComputingElement" string
ComputingServiceId = <%=@computing_service_id%>
#
#
# NumberOfEndPointType
# 2 (CREAM-CE + RTEpublisher) if CEMon is deployed
# 3 otherwise 
NumberOfEndPointType = 2

#
#
# ImplementationVersion is the version of the CREAM service
ImplementationVersion=@creamversion@

#
#
# InterfaceVersion is the version of the Service interface
InterfaceVersion=2.1

#
#
# HealthStateHelper should be the full pathname of the /glite-info-service-test plus CREAM as argument
HealthStateHelper = /usr/bin/glite-info-service-test CREAM

#
#
# ServingState of the Computing Element. It should be usually set to production
ServingState = Production

#
#
# QualityLevel of the Service Element. It should be usually set to production
QualityLevel = <%=@ce_quality_level%>

#
#
# Owner should be the list of owner VO names
Owner =  <%=@voenv.keys().join(" ")%>  

#
#
# Argus is yes if this CREAM CE is using Argus as authorization mechanism
<% if @use_argus -%>
Argus = yes
<% else -%>
Argus = no
<% end -%>

#
#
# EMIES is yes if the CREAM CE provides the ES interface
EMIES = no

#
# 
#ACBR should be the list of AccessControlBaseRule strings to indicate who is allowed to 
# have access to the service - at the simplest this is the same as the
# Owner but with the VO names prefixed by "VO:"
<%acbrlist=''
@voenv.each do | vo, value | 
  acbrlist=acbrlist+" VO:"+vo 
end -%>
ACBR = <%=acbrlist%>

#
# ExecutionEnvironments
# The list of the ids of the Execution Environments
# Format: ExecutionEnvironments = (EE1, EE2, ..., EEn)
ExecutionEnvironments = (<%=@ce_host%>)

#
#
# CE_BATH_SYS is the batch system used by the CE. E.g. torque, lsf, etc
# It should be filled with the content of yaim variable CE_BATCH_SYS
CE_BATCH_SYS = <%=@batch_system%>

#
#
# BATCH_VERSION is the Version of the batch system
# It should be filled with the content of yaim variable BATCH_VERSION
BATCH_VERSION = <%=@batch_system-%>_<%=defined? @batchversion ? @batchversion : 'undef'%>

#
#
# CloseSEs is the list of the storage services close to this computing service
# Format: CloseSEs = (closeSE1, closeSE2, ..., closeSEn)
# Format of closeSEi: (StorageServiceid LocalPath RemotePath)
#CloseSEs = srm-lhcb.cern.ch srm-atlas.cern.ch srm-alice.cern.ch srm-cms.cern.ch srm-dteam.cern.ch srm-public.cern.ch srm-pps.cern.ch srm-eoscms.cern.ch srm-eosatlas.cern.ch
# 
<%CloseSEs=Array.new
CloseSEsFormatted=Array.new
@voenv.each do | vo, value |
  defaultSE = value['vo_default_se']
  if ! CloseSEs.include?(defaultSE)
    CloseSEs.push(defaultSE)
    seObj=@se_list[defaultSE]
    CloseSEsFormatted.push("("+ defaultSE + " " + seObj['mount_dir'] + " " + seObj['export_dir']+ ")")
  end
end-%>
CloseSEs = (<%=CloseSEsFormatted.join(', ')-%>)
#
#
# CE_CAPABILITY is the list of CE capabilities
# Format: CECapabilities = (capa1, capa2, ..., capaN)
CECapabilities = (<%=@ce_capability.join(",")-%>)

<%if @clustermode == 'false' -%>
# CE in non-cluster mode
#
#
#
<% @cluster_list.each do | cdata | -%>
# ArchitecturePlatformType is the Platform Type of the WNs of the 
# specified EE
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OS_ARCH
ExecutionEnvironment_<%=cdata["id"]-%>_ArchitecturePlatformType = <%=cdata["platform_type"]%>
#
# 
# PhysicalCPUs is the total number of real CPUs/physical chips, including 
# the nodes that are temporary down or offline 
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_PHYSCPU
ExecutionEnvironment_<%=cdata["id"]-%>_PhysicalCPUs = <%=cdata["physcpu"]%>
#
#
# LogicalCPUs is the total number of cores/hyperthreaded CPUs, including the 
# nodes that are temporary down or offline
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_LOGCPU
ExecutionEnvironment_<%=cdata["id"]-%>_LogicalCPUs = <%=cdata["logcpu"]%>
#
#
# SmpSize is the number of Logical CPUs (cores) of the WN
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_SMPSIZE 
ExecutionEnvironment_<%=cdata["id"]-%>_SmpSize = <%=cdata["smpsize"]%>
#
# 
# ProcessorVendor is the name of the processor vendor for the Worker Nodes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_CPU_VENDOR
ExecutionEnvironment_<%=cdata["id"]-%>_ProcessorVendor = <%=cdata["cpu_vendor"]%>
#
#
# ProcessorModel is the name of the processor model as defined by the vendor 
# for the Worker Nodes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_CPU_MODEL
ExecutionEnvironment_<%=cdata["id"]-%>_ProcessorModel = <%=cdata["cpu_model"]%>
#
#
# ProcessorClockSpeed is the processor clock speed expressed in MHz for the 
# Worker Nodes 
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_CPU_SPEED
ExecutionEnvironment_<%=cdata["id"]-%>_ProcessorClockSpeed = <%=cdata["cpu_speed"]%>
#
#
# MainMemoryRAMSize is the total physical memory of a WN expressed in MegaBytes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_MINPHYSMEM 
ExecutionEnvironment_<%=cdata["id"]-%>_MainMemoryRAMSize = <%=cdata["minphysmem"]%>
#
#
# MainMemoryVirtualSize is the total virtual memory of a WN expressed in 
# MegaBytes.
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_MINVIRTMEM
ExecutionEnvironment_<%=cdata["id"]-%>_MainMemoryVirtualSize = <%=cdata["minvirtmem"]%>
#
# 
# OperatingSystemFamily should be filled with the OS family (e.g. linux)
# It must be set for all the Execution Environments
ExecutionEnvironment_<%=cdata["id"]-%>_OperatingSystemFamily = <%=cdata["os_family"]%>
#
# 
# OperatingSystemName is the name of the operating system used on the Worker 
# Nodes 
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OS
ExecutionEnvironment_<%=cdata["id"]-%>_OperatingSystemName = <%=cdata["os_name"]%>
#
# 
# OperatingSystemRelease is the release of the operating system used on the 
# Worker Nodes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OS_RELEASE
ExecutionEnvironment_<%=cdata["id"]-%>_OperatingSystemRelease = <%=cdata["os_release"]%>
# 
#
# NetworkAdapterInboundIP must be set to either FALSE or TRUE to express the 
# permission for inbound connectivity for the WNs
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_INBOUNDIP
ExecutionEnvironment_<%=cdata["id"]-%>_NetworkAdapterInboundIP = <%=cdata["inboundip"]%>
#
#
# NetworkAdapterOutboundIP must be set to either FALSE or TRUE to express 
# the permission for outbound connectivity for the WNs
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OUTBOUNDIP
ExecutionEnvironment_<%=cdata["id"]-%>_NetworkAdapterOutboundIP = <%=cdata["outboundip"]%>
#
#
# Benchmarks is the list of benchmarks
# Format: Benchmarks = (Benchmark1, Benchmark2, .., Benchmarkn)
# Format of Benchmarki: (Type Value)
<%
benchstr = nil
cdata["benchmarks"].each do | benchname, benchvalue |
  if benchstr == nil
    benchstr = "((#{benchname} #{benchvalue})"
  else
    benchstr << ", (#{benchname} #{benchvalue})"
  end
end
if benchstr == nil
  benchstr = "()"
else
  benchstr << ")"
end
-%>
ExecutionEnvironment_<%=cdata["id"]-%>_Benchmarks = test_<%=benchstr%>
#
#
# Cores is the number of cores per CPU of the Worker Nodes
# It must be set for all the Execution Environments
ExecutionEnvironment_<%=cdata["id"]-%>_Cores = <%=cdata["cores"]%>
<%end-%>


<% 
sharelist=Array.new

@queue_vo_map.each do | queue, vodata |
  vodata.each do | owner, fqans |
     sharelist.push(queue + '_' + owner)
-%>
SHARE_<%=queue-%>_<%=owner-%>_QUEUENAME=<%=queue%>
<%# TODO implement access fqan-based -%>
SHARE_<%=queue-%>_<%=owner-%>_ACBRS=( VO:<%=owner-%> )
SHARE_<%=queue-%>_<%=owner-%>_OWNER=<%=owner%>
SHARE_<%=queue-%>_<%=owner-%>_ENDPOINTS=(<%=@ce_host-%>_org.glite.ce.CREAM)
SHARE_<%=queue-%>_<%=owner-%>_EXECUTIONENVIRONMENTS=(<%=@ce_host-%>)
SHARE_<%=queue-%>_<%=owner-%>_CEIDS=(<%=@ce_host-%>:<%=@ce_port-%>/<%=@ce_type-%>-<%=@batch_system-%>-<%=queue-%>)  

<%end-%>
<%end-%>

#
#
# Shares. The list of shares.
# Format: Shares = (share1, share2, ..., sharen)

Shares = ( <%=sharelist.join(',')-%> )

<%end-%>
